from aiogram import Router, F
from aiogram.types import Message, ContentType, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from app.database.models import User
from app.database.request import is_reg, set_user
import app.keyboards as kb
from app.States import Registration

reg_router = Router()


@reg_router.message(Command("reg"))
async def cmd_reg(message: Message, state: FSMContext):
    await state.clear()
    try:
        if await is_reg(message.from_user.id):
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",reply_markup=kb.start_keyboard)
            return
    except:
        print("Errror DataBase")
    await state.clear()
    await state.set_state(Registration.name)
    await message.answer(text="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=kb.cancel_registration)


@reg_router.callback_query(F.data == "registration")
async def cmd_reg(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    await state.clear()
    await state.set_state(Registration.name)
    await callback.message.edit_text(text="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=kb.cancel_registration)



@reg_router.message(Registration.name)
async def reg_first(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=kb.num_keyboard)


@reg_router.message(Registration.number)
async def reg_second(message: Message, state: FSMContext):
    if message.content_type == ContentType.CONTACT:
        phone_number = message.contact.phone_number
    else:
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.", reply_markup=kb.num_keyboard)
            return
        if len(message.text) != 11:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ –Ω–æ–º–µ—Ä–µ.", reply_markup=kb.num_keyboard)
            return
        phone_number = message.text
    await state.update_data(number=phone_number)
    await state.set_state(Registration.mail)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π mail.", reply_markup=ReplyKeyboardRemove())


@reg_router.message(Registration.mail)
async def reg_third(message: Message, state: FSMContext):
    if not all(x in message.text for x in ("@", ".")):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=kb.cancel_registration)
        return
    await state.update_data(mail=message.text)
    await state.update_data(username=message.from_user.username)
    await state.update_data(id=message.from_user.id)
    data = await state.get_data()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ! \n"
                         f"–í–∞—à–µ –∏–º—è: {data['name']}\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['number']}\n"
                         f"E-mail: {data['mail']}"
                         , reply_markup=kb.result_reg)


@reg_router.callback_query(F.data == "success_reg")
async def save_registered(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = User(
        tg_id=data['id'],
        name=data['name'],
        user_name=data['username'],
        email=data['mail'],
        phone_num=data['number']
    )
    await set_user(user)
    await state.clear()
    await callback.answer()
    await callback.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await callback.message.answer("üëáüëáüëá –ú–µ–Ω—é üëáüëáüëá", reply_markup=kb.menu_keyboard)


@reg_router.callback_query(F.data == "bad_reg")
async def bad_reg(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ")
    await cmd_reg(callback.message, state)


@reg_router.callback_query(F.data == "cancel_reg")
async def cancel_reg(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
    await callback.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
    await callback.message.answer("üëáüëáüëá –ú–µ–Ω—é üëáüëáüëá", reply_markup=kb.menu_keyboard)
